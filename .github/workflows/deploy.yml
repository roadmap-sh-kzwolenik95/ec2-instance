name: Deploy static content to Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

env:
  TF_VAR_pvt_key: ${{ secrets.SSH_PRIV_KEY }}

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    env:
      TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      TF_VAR_my-machine-pub-key: ${{ vars.PUB_KEY }}
      TF_VAR_apex-domain: ${{ vars.APEX_DOMAIN }}
      TF_VAR_subdomain: ${{ vars.SUBDOMAIN }}
      TF_VAR_acme-email: ${{ vars.ACME_EMAIL }}
    outputs:
      ec2_pub_ip: ${{ steps.terraform-outputs.outputs.ec2_public_ip }}
      full_domain: ${{ steps.terraform-outputs.outputs.full_domain }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.IAMROLE_GITHUB }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        run: terraform plan -no-color

      - name: Terraform Apply
        run: terraform apply -no-color --auto-approve

      - name: Terraform save outputs
        id: terraform-outputs
        run: |
          echo "ec2_public_ip=$(terraform output -raw ec2_public_ip)" >> "$GITHUB_OUTPUT"
          echo "full_domain=$(terraform output -raw full_domain)" >> "$GITHUB_OUTPUT"

  deploy-website:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          sparse-checkout: site_files
          sparse-checkout-cone-mode: false
      - name: Deploy site files to Nginx
        uses: Burnett01/rsync-deployments@7.0.2
        env:
          EC2_PUB_IP: ${{ needs.deploy-infrastructure.outputs.ec2_pub_ip }}
          FULL_DOMAIN: ${{ needs.deploy-infrastructure.outputs.full_domain }}
        with:
          switches: -avzr --rsync-path="sudo rsync"
          path: site_files/
          remote_path: "/var/www/${{ env.FULL_DOMAIN }}/html/"
          remote_host: ${{ env.EC2_PUB_IP }}
          remote_user: ubuntu
          remote_key: ${{ secrets.SSH_PRIV_KEY }}
